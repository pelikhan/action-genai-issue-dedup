script({
  title: "GitHub Action Deduplication",
  description: `This script checks if an issue is a duplicate of another issue in the same repository.`,
  branding: {
    icon: "copy",
    color: "blue",
  }
});
const { output } = env;
const issue = await github.getIssue();
if (!issue) {
  throw new Error(`Issue not found`);
}
output.heading(2, `Deduplicating issue #${issue.number}: ${issue.title}`);
output.itemLink(`issue`, issue.html_url);

// we only have 16k tokens, so we need to be careful with the prompt size
// issuing one request per issue
const otherIssues = await github.listIssues({
  state: "open",
  sort: "updated",
  direction: "desc",
  count: 30,
});
for (const otherIssue of otherIssues) {
  if (otherIssue.number === issue.number) {
    continue; // Skip the issue itself
  }

  output.heading(3, `Checking issue #${otherIssue.number} for duplicates`);
  const otherComments = await github.listIssueComments(otherIssue.number);
  const res = await runPrompt(
    (ctx) => {
      const newIssueRef = ctx.def("NEW_ISSUE", `${issue.title} ${issue.body}`, {
        flex: 5,
      });
      const otherIssueRef = ctx.def(
        "OTHER_ISSUE",
        `${otherIssue.title}
${otherIssue.body}
${otherComments.map((c) => `- ${c.user.login}: ${c.body}`).join("\n")}`,
        { flex: 1 }
      );

      ctx.$`## Role and Task
You are an expert GitHub project maintainer and issue tracking expert.
You are tasked to detect if issue ${newIssueRef} is a duplicate of issue ${otherIssueRef}.

## Output format
Explain your reasoning step by step.
If NEW_ISSUE is a duplicate of OTHER_ISSUE, return "DUP". If it is not, return "UNI".
`;
    },
    {
      flexTokens: 12000,
      choices: ["UNI", "DUP"],
      model: "github:gpt-4.1-mini",
    }
  );

  output.fence(res.text, "markdown");
  const duplicate = /DUP/.test(res.text);
  if (duplicate) {
    output.note("found duplicate issue!");
    const newComment = await github.createIssueComment(
      otherIssue.number,
      `This issue is might be a duplicate of #${issue.number}.
> Generated by AI.`
    );
    output.itemLink(`comment`, newComment.html_url);
    cancel("found duplicate issue");
  }
}

output.p("All issues checked, no duplicates found.");
